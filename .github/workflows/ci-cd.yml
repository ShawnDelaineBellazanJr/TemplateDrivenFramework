name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'src/StrangeLoopPlatform.sln'
  API_PROJECT: 'src/StrangeLoopPlatform.Api/StrangeLoopPlatform.Api.csproj'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/*.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          src/**/bin/Release/
          src/**/obj/Release/
        retention-days: 7

  # Security Analysis Job
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run security scan
      run: |
        dotnet tool install --global dotnet-security-scan
        dotnet security-scan ${{ env.SOLUTION_FILE }}
        
    - name: Run dependency check
      run: |
        dotnet list ${{ env.SOLUTION_FILE }} package --vulnerable
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.json
        retention-days: 30

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run code analysis
      run: |
        dotnet tool install --global dotnet-format
        dotnet format --verify-no-changes ${{ env.SOLUTION_FILE }}
        
    - name: Run style analysis
      run: |
        dotnet tool install --global dotnet-format
        dotnet format --style --verify-no-changes ${{ env.SOLUTION_FILE }}
        
    - name: Run complexity analysis
      run: |
        dotnet tool install --global dotnet-complexity
        dotnet complexity ${{ env.SOLUTION_FILE }}

  # Docker Build and Push
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, code-quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/strangeloopplatform:latest
          ${{ secrets.DOCKER_USERNAME }}/strangeloopplatform:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment: development
    
    steps:
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/development/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add your smoke test commands here
        
    - name: Notify deployment
      run: |
        echo "Development deployment completed successfully!"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add your integration test commands here
        
    - name: Notify deployment
      run: |
        echo "Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run production tests
      run: |
        echo "Running production tests..."
        # Add your production test commands here
        
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-test.result == 'success' && needs.security-analysis.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        # Add your notification logic here (Slack, Teams, etc.)
        
    - name: Notify on failure
      if: needs.build-and-test.result == 'failure' || needs.security-analysis.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "❌ Some checks failed!"
        # Add your failure notification logic here 